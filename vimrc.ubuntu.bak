" set not compatible 
set nocompatible
set nobackup

" set window
set guioptions-=T
set guioptions-=m

set nu

" set status bar
set ruler
set showcmd
set scrolloff=1 " so
if has("gui_running")
    set cursorline
endif

" set window position
if has("gui_running")
    winpos 200 100
    set lines=25 columns=80
endif

" 标签页只显示文件名
function ShortTabLabel ()
    let bufnrlist = tabpagebuflist (v:lnum)
    let label = bufname (bufnrlist[tabpagewinnr (v:lnum) -1])
    let filename = fnamemodify (label, ':t')
    return filename
endfunction
set guitablabel=%{ShortTabLabel()}

set cindent
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

set fileformat=unix
set fenc=utf-8
set encoding=utf-8

" set tags
set tags=/var/www/jumeiwei/tags
set dir=~/asshole/gvsess/

" set search
set incsearch
set hlsearch
set ignorecase

set backspace=indent,eol,start
set whichwrap=b,s,<,>,[,]

" set font
" set guifont=Droid\ Sans\ Mono\ 10

" ------------------------------
"  vundle bundle
" ------------------------------
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" original repos on github
" Bundle 'tpope/vim-fugitive'
Bundle 'Lucius'
Bundle 'winmanager'
" window manager
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<CR>

"Bundle 'minibufexplorerpp'
" mini buffer
"let g:miniBufExplMapCTabSwitchBufs=1
"set bufhidden=hide

Bundle 'SuperTab'
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType="<C-X><C-O>"

" ----------------------------------------
"  auto complete pop
"Bundle 'AutoComplPop'

" vim-scripts repos
Bundle 'phpfolding.vim'
Bundle 'taglist.vim'

" python complete
Bundle 'pythoncomplete'
let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
autocmd FileType python set omnifunc=pythoncomplete#Complete


" Bundle 'L9'
" Bundle 'FuzzyFinder'
" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
" ...

filetype plugin indent on     " required! 
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

colorscheme lucius
autocmd BufEnter *.phtml set syn=php

:inoremap <S-ENTER> <c-r>=SkipPair()<CR>
:inoremap <S-SPACE> <ESC>la
:inoremap <C-ENTER> <ESC>A;<CR>
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { <c-r>=ClsoeBrace()<CR>
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap ;; <ESC>A;<CR>

function ClosePair(char)
   if getline('.')[col('.') - 1] == a:char
      return "\<Right>"
   else
      return a:char
   endif
endf
function Semicolon()
   "echo getline('.')[col('.')]
   if getline('.')[col('.')] == ')'
      return "<ESC>A;"
   elseif getline('.')[col('.')] == '}'
      return "\<ESC>A;"
   elseif getline('.')[col('.')] == ']'
      return "\<ESC>A;"
   else
      return ";"
   endif
endf
function SkipPair()
   if getline('.')[col('.') - 1] == ')'
      return "\<ESC>o"
   else
      normal j
      let curline = line('.')
      let nxtline = curline
      while curline == nxtline
         if getline('.')[col('.') - 1] == '}'
            normal j
            let nxtline = nxtline + 1
            let curline = line('.')
            continue
         else
            return "\<ESC>i"
         endif
        
      endwhile
      return "\<ESC>o"
   endif
endf
function ClsoeBrace()
   if getline('.')[col('.') - 2] == '='
      return "{}\<ESC>i"
   elseif getline('.')[col('.') - 3] == '='
      return "{}\<ESC>i"
   elseif getline('.')[col('.') - 1] == '{'
      return "{}\<ESC>i"
   elseif getline('.')[col('.') - 2] == '{'
      return "{}\<ESC>i"
   elseif getline('.')[col('.') - 2] == ','
      return "{}\<ESC>i"
   elseif getline('.')[col('.') - 3] == ','
      return "{}\<ESC>i"
   else
      return "{}\<ESC>i"
   endif
endf

" set shortcuts
source ~/.vim/shortcuts.vim

